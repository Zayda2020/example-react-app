{"version":3,"sources":["components/Header.js","components/Footer.js","components/ListCard.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","role","aria-label","Footer","class","ListCard","props","console","log","quote","List","quotes","map","item","components_ListCard","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTheData","fetch","then","response","json","setState","data","state","name","color","components_Header","onClick","components_List","number","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAWeA,eARA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,SAA2BH,EAAAC,EAAAC,cAAA,QAAME,KAAK,MAAMC,aAAW,SAA5B,4BAA3B,mBCKGC,SARA,WACX,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,MAAIK,MAAM,QAAV,oBCSGC,SAZE,SAACC,GAEd,OADAC,QAAQC,IAAIF,EAAMG,MAAO,kBAErBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASM,EAAMG,WCU7BC,SATF,SAACJ,GAEV,OADAC,QAAQC,IAAIF,EAAO,cAEfT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACEM,EAAMK,OATdC,IAAI,SAAAC,GACb,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,CAAUL,MAAOI,SCyCjBE,cAvCb,SAAAA,EAAYT,GAAM,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KASRiB,WAAa,WACXC,MAAM,wDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAQ,OAAIV,EAAKY,SAAS,CAACC,KAAMH,OAXzCV,EAAKc,MAAQ,CACXC,KAAM,MACNC,MAAO,OACPH,KAAM,IALQb,mFAmBhBG,KAAKI,8CAOL,OADAhB,QAAQC,IAAIW,KAAKW,MAAMD,KAAM,aAE3BhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,UAAQmC,QAASf,KAAKI,YAAtB,sBAEA1B,EAAAC,EAAAC,cAACoC,EAAD,CAAMxB,OAAQQ,KAAKW,MAAMD,OACzBhC,EAAAC,EAAAC,cAAA,UAAKoB,KAAKW,MAAMM,QAChBvC,EAAAC,EAAAC,cAACsC,EAAD,cAnCUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.d3fd678a.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header-container'>\r\n            <h3 className='fart'>OMG I <span role='img' aria-label='heart'>️️❤️</span> RON SWANSON</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport '../styles/Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='footer-container'>\r\n            <h3 class='fart'>I'm a footer!</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport '../styles/ListCard.css'\r\n\r\nconst ListCard = (props) => {\r\n    console.log(props.quote, 'listcard props')\r\n    return(\r\n        <div className='card-container'>\r\n            <h1 className='ron-says'>Ron Says:</h1>\r\n            <div className='quote-container'>\r\n                <p className='quote'>{props.quote}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListCard","import React from 'react'\r\nimport ListCard from './ListCard'\r\nimport '../styles/List.css'\r\n\r\nconst createCards = (array) => {\r\n    return array.map(item => {\r\n        return <ListCard quote={item}/>\r\n    })\r\n}\r\n\r\nconst List = (props) => {\r\n    console.log(props, 'list props')\r\n    return(\r\n        <div className='cards-container'>\r\n            {createCards(props.quotes)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport List from './components/List'\r\n\r\nclass App extends Component {\r\n  //constructor only holds super(props), this.state\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      name: 'Jed',\r\n      color: 'blue',\r\n      data: []\r\n    }\r\n  }\r\n\r\n  //function to get the data and put the data in state\r\n  getTheData = () => {\r\n    fetch('http://ron-swanson-quotes.herokuapp.com/v2/quotes/10')\r\n      .then(response => response.json())\r\n      .then(response => this.setState({data: response}))\r\n  }\r\n\r\n  //run function to get data when component is mounted\r\n  //lifecycle method\r\n  componentDidMount(){\r\n    this.getTheData()\r\n  }\r\n\r\n  //render is what you see on the screen\r\n  //has to have a return\r\n  render() {\r\n    console.log(this.state.data, 'app state')\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <button onClick={this.getTheData}>NEW QUOTES, PLEASE</button>\r\n        {/* passing data to list component */}\r\n        <List quotes={this.state.data}/>\r\n        <h1>{this.state.number}</h1>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}